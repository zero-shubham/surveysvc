// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO
  answers (
    selected_option,
    answer_text,
    user_id,
    question_id,
    question_set_id
  )
VALUES
  ($1, $2, $3, $4, $5)
  RETURNING id, selected_option, answer_text, user_id, question_id, question_set_id, created_at, updated_at
`

type CreateAnswerParams struct {
	SelectedOption pgtype.Text `json:"selected_option"`
	AnswerText     pgtype.Text `json:"answer_text"`
	UserID         uuid.UUID   `json:"user_id"`
	QuestionID     uuid.UUID   `json:"question_id"`
	QuestionSetID  uuid.UUID   `json:"question_set_id"`
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRow(ctx, createAnswer,
		arg.SelectedOption,
		arg.AnswerText,
		arg.UserID,
		arg.QuestionID,
		arg.QuestionSetID,
	)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.SelectedOption,
		&i.AnswerText,
		&i.UserID,
		&i.QuestionID,
		&i.QuestionSetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createQuestionMapping = `-- name: CreateQuestionMapping :one
INSERT INTO question_mappings (question_id, campaign_id, org_id)
VALUES ($1, $2, $3)
RETURNING id, question_id, campaign_id, org_id, created_at, updated_at
`

type CreateQuestionMappingParams struct {
	QuestionID uuid.UUID `json:"question_id"`
	CampaignID uuid.UUID `json:"campaign_id"`
	OrgID      uuid.UUID `json:"org_id"`
}

func (q *Queries) CreateQuestionMapping(ctx context.Context, arg CreateQuestionMappingParams) (QuestionMapping, error) {
	row := q.db.QueryRow(ctx, createQuestionMapping, arg.QuestionID, arg.CampaignID, arg.OrgID)
	var i QuestionMapping
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.CampaignID,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswers = `-- name: GetAnswers :many
SELECT id, selected_option, answer_text, user_id, question_id, question_set_id, created_at, updated_at
FROM answers
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAnswersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAnswers(ctx context.Context, arg GetAnswersParams) ([]Answer, error) {
	rows, err := q.db.Query(ctx, getAnswers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.SelectedOption,
			&i.AnswerText,
			&i.UserID,
			&i.QuestionID,
			&i.QuestionSetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnswersByQuestionID = `-- name: GetAnswersByQuestionID :many
SELECT id, selected_option, answer_text, user_id, question_id, question_set_id, created_at, updated_at
FROM answers 
WHERE question_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetAnswersByQuestionIDParams struct {
	QuestionID uuid.UUID `json:"question_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetAnswersByQuestionID(ctx context.Context, arg GetAnswersByQuestionIDParams) ([]Answer, error) {
	rows, err := q.db.Query(ctx, getAnswersByQuestionID, arg.QuestionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.SelectedOption,
			&i.AnswerText,
			&i.UserID,
			&i.QuestionID,
			&i.QuestionSetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionMappingsByCampaignID = `-- name: GetQuestionMappingsByCampaignID :many
SELECT id, question_id, campaign_id, org_id, created_at, updated_at FROM question_mappings 
WHERE campaign_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetQuestionMappingsByCampaignIDParams struct {
	CampaignID uuid.UUID `json:"campaign_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetQuestionMappingsByCampaignID(ctx context.Context, arg GetQuestionMappingsByCampaignIDParams) ([]QuestionMapping, error) {
	rows, err := q.db.Query(ctx, getQuestionMappingsByCampaignID, arg.CampaignID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuestionMapping
	for rows.Next() {
		var i QuestionMapping
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.CampaignID,
			&i.OrgID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestionMappingsByID = `-- name: UpdateQuestionMappingsByID :one
UPDATE question_mappings
SET campaign_id = $2, question_id = $3, org_id = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, question_id, campaign_id, org_id, created_at, updated_at
`

type UpdateQuestionMappingsByIDParams struct {
	ID         uuid.UUID `json:"id"`
	CampaignID uuid.UUID `json:"campaign_id"`
	QuestionID uuid.UUID `json:"question_id"`
	OrgID      uuid.UUID `json:"org_id"`
}

func (q *Queries) UpdateQuestionMappingsByID(ctx context.Context, arg UpdateQuestionMappingsByIDParams) (QuestionMapping, error) {
	row := q.db.QueryRow(ctx, updateQuestionMappingsByID,
		arg.ID,
		arg.CampaignID,
		arg.QuestionID,
		arg.OrgID,
	)
	var i QuestionMapping
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.CampaignID,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
